#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <unistd.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <pthread.h>

#define _BACKLOG_ 10

int CreateSock(char *ip, int port)
{
    int sock = socket(AF_INET, SOCK_STREAM, 0);
    if(sock < 0)
    {
        printf("socket error\n");
        exit(1);
    }

    struct sockaddr_in server_addr;
    bzero(&server_addr, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(port);
    server_addr.sin_addr.s_addr = INADDR_ANY;

    if(bind(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0)
    {
        printf("bind error\n");
        close(sock);
        exit(2);
    }

    if(listen(sock, _BACKLOG_) < 0)
    {
        printf("listen error\n");
        close(sock);
        exit(3);
    }

    return sock;
}

typedef struct
{
    int sock;
    struct sockaddr_in addr;
}Arg;

void* Service(void* arg)
{
    Arg *client = (Arg*)arg;
    char buf[10240] = { 0 };
    const char *p = "<html><h1>Hello world</h1></html>";
    sprintf(buf, "HTTP/1.0 200 OK\nContent-Length:%lu\n\n%s", strlen(p), p);
    write(client->sock, buf, strlen(buf));
}

int main(int argc, char *argv[])
{
    if(argc < 3)
    {
        printf("%s [addr]:[port]\n", argv[0]);
        exit(1);
    }

    int sock = CreateSock(argv[1], atoi(argv[2]));
    struct sockaddr_in client_addr;
    bzero(&client_addr, sizeof(client_addr));
    while(1)
    {
        printf("wait connect!\n");
        socklen_t len = 0;
        int client_sock = accept(sock, (struct sockaddr*)&client_addr, &len);
        if(client_sock < 0)
        {
            printf("accept arror\n");
            continue;
        }

        char buf_ip[INET_ADDRSTRLEN];
        buf_ip[0] = 0;
        inet_ntop(AF_INET, &client_addr, buf_ip, sizeof(buf_ip));   
        printf("get connect, ip is:%s, port is: %d\n", buf_ip, ntohs(client_addr.sin_port));

        Arg arg;
        arg.sock = client_sock;
        arg.addr = client_addr;

        pthread_t tid;
        pthread_create(&tid, NULL, Service, (void*)&arg);
        pthread_detach(tid);
    }
    close(sock);
    return 0;
}
